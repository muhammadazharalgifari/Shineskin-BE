// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model users {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  email         String        @unique
  password      String
  imageProfile  String
  role          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  products      products[]
  transaction   transactions[]
  cartItem      cartItems[]
}

model categories {
  id            Int           @id @default(autoincrement())
  name          String
  description   String
  imageCategory String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  products      products[]
}

model products {
  id            Int           @id @default(autoincrement())
  name          String
  price         Int
  description   String
  imageProduct  String
  stock         Int           @default(0)
  userId        Int
  categoryId    Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          users         @relation(fields: [userId],references: [id], onDelete: Cascade)
  category      categories?   @relation(fields: [categoryId],references: [id], onDelete: Cascade)

  cartItem      cartItems[]
}


model cartItems {
  id              Int           @id @default(autoincrement())
  userId          Int
  transactionId   Int
  productId       Int
  quantity        Int           @default(1)
  subtotal_price  Decimal
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  product         products      @relation(fields: [productId], references: [id], onDelete: Cascade)
  transaction     transactions  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  user            users         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model transactions {
  id              Int          @id @default(autoincrement())
  userId          Int
  total_price     Decimal
  status          String
  paymentUrl      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user            users        @relation(fields: [userId], references: [id], onDelete: Cascade)

  cartItems       cartItems[]
}
